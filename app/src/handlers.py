import os
import asyncio

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest

from dotenv import load_dotenv

from .parsers.cb_course import parse_course, format_courses_for_telegram
from .parsers.currency import currency_codes, convert_currency, currency_rates
from .utils import keyboards as kb

router = Router()
load_dotenv()
URL = os.getenv("URL1")


class Currency(StatesGroup):
    """–ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∞–ª—é—Ç –∏ —Å—É–º–º—ã –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"""
    from_currency = State()
    to_currency = State()
    amount = State()



@router.message(CommandStart())
async def start(message: Message):
    """–°—Ç–∞—Ä—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫"""
    await message.answer(
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ <b>{message.from_user.full_name}</b> üëã, –≤—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –í–∞c –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç.",
            reply_markup=kb.choice,  parse_mode='HTML'
    )


@router.message(F.text.lower() == "–∫—É—Ä—Å –≤–∞–ª—é—Ç –∫ —Ä—É–±–ª—é üìà")
async def show_ruble_rates(message: Message):
    """–í—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –∫–æ—Ç–æ—Ä–∞—è –ø–∞—Ä—Å–∏—Ç –≤–∞–ª—é—Ç—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä—É–±–ª—è, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç"""
    try:
        await message.answer("–ü–æ–ª—É—á–∞—é –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç, –æ–∂–∏–¥–∞–π—Ç–µ...‚è≥", reply_markup=kb.delete)
        courses = await parse_course(URL)
        await asyncio.sleep(1.5)
        if courses:
            formatted_courses = format_courses_for_telegram(courses)
            await message.answer(
                "<b>–ö—É—Ä—Å—ã –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç –∫ —Ä—É–±–ª—é –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>", parse_mode='HTML'
            )
            await message.answer(f'<b>{formatted_courses}</b>', reply_markup=kb.to_main, parse_mode='HTML')
        else:
            await message.answer("<i>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç üòï</i>", reply_markup=kb.to_main, parse_mode='HTML')
    except Exception:
        await message.answer("<i>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç üòï</i>", reply_markup=kb.to_main, parse_mode='HTML')
        raise



@router.message(F.text.lower() == '–∫—É—Ä—Å –≤–∞–ª—é—Ç üßæ')
async def show_exchange_rates(message: Message):
    """–í—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –∫–æ—Ç–æ—Ä–∞—è –ø–∞—Ä—Å–∏—Ç –≤–∞–ª—é—Ç—ã, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç"""
    try:
        await message.answer("–ü–æ–ª—É—á–∞—é –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç, –æ–∂–∏–¥–∞–π—Ç–µ...‚è≥", reply_markup=kb.delete)
        courses = await currency_rates()
        await asyncio.sleep(1.5)
        if courses:
            await message.answer("<b>–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ USD: </b>", parse_mode='HTML')
            await message.answer(f'<b>{courses}</b>', parse_mode='HTML')

            await asyncio.sleep(1.5)
            await message.answer("<i>–ö–æ–¥—ã –≤–∞–ª—é—Ç –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø–æ <b>ISO 4217</b>, –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∏–º–∏ –º–æ–∂–Ω–æ "
                                 "–ø–æ <a href='https://www.exchangerate-api.com/docs/supported-currencies'>—Å—Å—ã–ª–∫–µ."
                                 "</a></i>",
                                 reply_markup=kb.to_main)
        else:
            await message.answer("<i>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç üòï</i>", reply_markup=kb.to_main, parse_mode='HTML')
    except Exception:
        await message.answer("<i>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç üòï</i>", reply_markup=kb.to_main, parse_mode='HTML')
        raise



@router.message(F.text.lower() == "–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—É üí∏")
async def get_from_currency(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–ª—é—Ç–µ"""
    await message.answer("<i>–ü–æ–¥–æ–∂–¥–∏—Ç–µ, —Å–æ–±–∏—Ä–∞—é —Å–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç...</i>", reply_markup=kb.delete, parse_mode='HTML')
    await asyncio.sleep(2)
    await message.answer(
        "<ins><i>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –∏–∑ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å:</i></ins>", reply_markup=await kb.currency_buttons(0),
                                                                        parse_mode='HTML'
    )
    await state.set_state(Currency.from_currency)



@router.callback_query(Currency.from_currency, F.data.startswith('currency:'))
async def get_to_currency(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–ª—é—Ç–µ"""
    currency = callback.data.split(':')[1]
    await state.update_data(from_currency=currency)
    await callback.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤–∞–ª—é—Ç—É: {currency}")

    new_text = '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –≤ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å:'
    try:
        if callback.message.text != new_text:
            await callback.message.edit_text(f'<ins><i>{new_text}</i></ins>',
                                             reply_markup=await kb.currency_buttons(0), parse_mode='HTML')
            await state.set_state(Currency.to_currency)
    except TelegramBadRequest as e:
        raise e



@router.callback_query(Currency.to_currency, F.data.startswith('currency:'))
async def get_amount(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—É–º–º—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"""
    currency = callback.data.split(':')[1]
    await state.update_data(to_currency=currency)
    await callback.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤–∞–ª—é—Ç—É: {currency}")
    await callback.message.edit_text("<ins><i>–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏</i></ins>", parse_mode='HTML')
    await state.set_state(Currency.amount)



@router.message(Currency.amount)
async def print_convert(message: Message, state: FSMContext):
    """–í—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—É–º–º—É –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    await state.update_data(amount=str(message.text))
    data = await state.get_data()
    from_currency = data.get("from_currency")
    to_currency = data.get("to_currency")
    amount = data.get("amount")
    if not from_currency or not to_currency:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—ã –∑–∞–Ω–æ–≤–æ‚ùó")
        await state.clear()
        return

    converted_result = await convert_currency(from_currency, to_currency, amount)
    await message.answer(converted_result, reply_markup=kb.to_main)
    await state.clear()



@router.callback_query(F.data.startswith('page:'))
async def pagination(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã inline –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤–∞–ª—é—Ç"""
    page = int(callback.data.split(':')[1])
    keyboard = await kb.currency_buttons(page)
    await callback.message.edit_reply_markup(reply_markup=keyboard)
    await callback.answer()



@router.message(F.text.lower() == '–æ –±–æ—Ç–µ üë®‚Äçüíª')
async def information_about_bot(message: Message):
    """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ"""
    await message.answer(
    '<b><i>–ü—Ä–∏–≤–µ—Ç üñê\n' 
        '–≠—Ç–æ—Ç –±–æ—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –º–æ–∏—Ö –Ω–∞–≤—ã–∫–æ–≤ –≤ —Å—Ñ–µ—Ä–µ –±–æ—Ç–æ-—Å—Ç—Ä–æ–µ–Ω–∏—è, –∞ —Ç–∞–∫–∂–µ —Å —Ü–µ–ª—å—é –ø–æ–º–æ—á—å –±—ã—Å—Ç—Ä–æ '
         '–ø–æ–ª—É—á–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–∞—Ö –≤–∞–ª—é—Ç –∏ –µ—ë –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.\n'
        '–•–æ—á—É –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å, —á—Ç–æ —Ç–∞—Ä–∏—Ñ —Ö–æ—Å—Ç–∏–Ω–≥–∞ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –±–æ—Ç —Å–∞–º—ã–π –¥–µ—à–µ–≤—ã–π '
        '–∏ –ø–æ—ç—Ç–æ–º—É –±–æ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –º–æ–º–µ–Ω—Ç–∞—Ö –¥–æ–ª–≥–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å.\n'
        '–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏—Ö –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ <a href="https://www.exchangerate-api.com">Exchangerate-api.com</a>.\n'
        '–ë–æ–ª—å—à–µ –º–æ–∏—Ö —Ä–∞–±–æ—Ç –í—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –≤ –º–æ—ë–º <b><u><a href="https://github.com/moond0wner">Github</a></u></b> üßê.\n'
        '–ï—Å–ª–∏ –í—ã –Ω–∞—à–ª–∏ –æ—à–∏–±–∫—É/–Ω–µ–¥–æ—á—ë—Ç, —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ –º–æ—ë–º –±–æ—Ç–µ –∏–ª–∏ –∂–µ–ª–∞–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –±–æ—Ç–∞: '
        '<b><u><a href="https://t.me/nevertoolate00">Telegram</a></u></b>.'
        '</i></b>',
        reply_markup=kb.to_main, parse_mode='HTML')



@router.callback_query(F.data == 'to main')
async def to_main(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≤—ã–±–æ—Ä —É—Å–ª—É–≥"""
    await callback.answer()
    await callback.message.answer("<i>–ü–µ—Ä–µ–º–µ—â–∞—é –í–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...‚åö</i>", parse_mode='HTML')
    await asyncio.sleep(2.5)
    await callback.message.answer('<b>–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç.</b>', reply_markup=kb.choice, parse_mode='HTML')


@router.callback_query(F.data == 'error')
async def check_to_error(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer("<i>–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É</i>", reply_markup=kb.to_main, parse_mode='HTML')